@misc{book:javase15-std,
  publisher = {Oracle},
  title     = {The Java\textregistered\ Virtual Machine Specification [Heap \& Stack]},
  year      = {2020},
  author    = {Lindholm, Tim and Yellin, Frank and Bracha, Gilad and Buckley, Alex and Smith, Daniel},
  url       = {https://docs.oracle.com/javase/specs/jvms/se15/html/jvms-2.html#jvms-2.5.2}
}

@misc{book:javadoc-stack-frame,
  publisher = {Oracle},
  title     = {Java Debug Interface -- StackFrame (JDK 11)},
  year      = {2021},
  url       = {https://docs.oracle.com/en/java/javase/11/docs/api/jdk.jdi/com/sun/jdi/StackFrame.html}
}

@misc{gh:tikzpingus,
  author    = {Florian Sihler},
  title     = {\LaTeX-Package, tikzpingus},
  year      = {2021},
  url       = {https://github.com/EagleoutIce/tikzpingus}
}

@article{dive:recursion,
  title={About primitive recursive algorithms},
  author={Colson, Lo{\"i}c},
  journal={Theoretical Computer Science},
  volume={83},
  number={1},
  pages={57--69},
  year={1991},
  publisher={Elsevier},
  url={https://www.sciencedirect.com/science/article/pii/0304397591900395}
}

@article{dive:ackermann,
  title={The Ackermann function. a theoretical, computational, and formula manipulative study},
  author={Sundblad, Yngve},
  journal={BIT Numerical Mathematics},
  volume={11},
  number={1},
  pages={107--119},
  year={1971},
  publisher={Springer},
  url={https://link.springer.com/content/pdf/10.1007/BF01935330.pdf}
}

@inproceedings{10.1145/328690.328700,
author = {Liu, Yanhong A. and Stoller, Scott D.},
title = {From Recursion to Iteration: What Are the Optimizations?},
year = {1999},
isbn = {1581132018},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/328690.328700},
doi = {10.1145/328690.328700},
abstract = {Transforming recursion into iteration eliminates the use of stack frames during program execution. It has been studied extensively. This paper describes a powerful and systematic method, based on incrementalization, for transforming general recursion into iteration: identify an input increment, derive an incremental version under the input increment, and form an iterative computation using the incremental version. Exploiting incrementalization yields iterative computation in a uniform way and also allows additional optimizations to be explored cleanly and applied systematically, in most cases yielding iterative programs that use constant additional space, reducing additional space usage asymptotically, and run much faster. We summarize major optimizations, complexity improvements, and performance measurements.},
booktitle = {Proceedings of the 2000 ACM SIGPLAN Workshop on Partial Evaluation and Semantics-Based Program Manipulation},
pages = {73–82},
numpages = {10},
location = {Boston, Massachusetts, USA},
series = {PEPM '00}
}



@article{dive:recursionvsit,
author = {Liu, Yanhong A. and Stoller, Scott D.},
title = {From Recursion to Iteration: What Are the Optimizations?},
year = {1999},
issue_date = {Nov. 1999},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {34},
number = {11},
issn = {0362-1340},
url = {https://doi.org/10.1145/328691.328700},
journal = {SIGPLAN Not.},
month = nov,
pages = {73–82},
numpages = {10}
}

